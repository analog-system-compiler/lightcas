/*******************************************************************************/
/*  Copyright (C) 2014 The LightCAS project                                    */
/*                                                                             */
/*  This program is free software; you can redistribute it and/or modify       */
/*  it under the terms of the GNU General Public License as published by       */
/*  the Free Software Foundation; either version 2 of the License, or          */
/*  (at your option) any later version.                                        */
/*                                                                             */
/*  This program is distributed in the hope that it will be useful,            */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of             */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              */
/*  GNU General Public License for more details.                               */
/*                                                                             */
/*  You should have received a copy of the GNU General Public License          */
/*  along with this program; if not, write to the Free Software                */
/*  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
/*******************************************************************************/

IF2( (a:b) 0) := b;
IF2( (a:b) 1) := a;
IF( (a:b) c)  := IF2( (a:b) BOOL(c) );
IF3( a b )    := IF( b a );

//Fract
MONADD(a,MONDIV(b,c))            := MONDIV( MONADD( MONMUL(a,c) ,b ), c );                        //a+b/c   := (a*c+b)/c
MONADD(MONDIV(a,c),b)            := MONDIV( MONADD( MONMUL(b,c) ,a ), c );                        //a/c+b   := (a+b*c)/c
MONADD(MONDIV(a,b),MONDIV(c,d))  := MONDIV( MONADD( MONMUL(a,d) , MONMUL(b,c) ), MONMUL( b,d ) ); //a/b+c/d := (a*d+b*c)/(b*d)
MONADD(MONDIV(a,b),MONDIV(c,b))  := MONDIV( MONADD(a,c), b );                                     //a/b+c/b := (a+c)/b
MONMUL(a,MONDIV(b,c))            := MONDIV( MONMUL(a,b), c );                                     //a*b/c   := (a*b)/c
MONMUL(MONDIV(a,c),b)            := MONDIV( MONMUL(a,b), c );                                     //a/c*b   := (a*b)/c
MONMUL(MONDIV(a,b),MONDIV(c,d))  := MONDIV( MONMUL(a,c), MONMUL(b,d) );                           //a/b*c/d := (a*c)/(b*d)
MONDIV(MONDIV(a,b),c)            := MONDIV( a,MONMUL(c,b ) );                                     //(a/b)/c := a/(c*b)
MONPOW(a,b)                      := MONPOWCONST(a,b,FLOOR(b)==b);

POLY(-a,v)                       := MONNEG( POLY(a,v) );
POLY(/a,v)                       := MONDIV( POLY(1,v) , POLY(a,v)    );
POLY(a+b,v)                      := MONADD( POLY(a,v) , POLY(b,v)    );
POLY(a-b,v)                      := MONSUB( POLY(a,v) , POLY(b,v)    );
POLY(a*b,v)                      := MONMUL( POLY(a,v) , POLY(b,v)    );
POLY(a/b,v)                      := MONDIV( POLY(a,v) , POLY(b,v)    );
POLY(a^b,v)                      := MONPOW( POLY(a,v) , SIMPLIFY(b)  );
POLY(a[b],v)                     := POLY(a,v)[SIMPLIFY(b)];

IPOLY(a,j())                     := IPOLY2(REDUCE_COMPLEX(a),j);
IPOLY(a,v)                       := IPOLY2(a,v);

//IPoly if simplication failure
IPOLY2(MONADD(a,b),v)            := IPOLY(a,v)+IPOLY(b,v);
IPOLY2(MONDIV(a,b),v)            := IPOLY(a,v)/IPOLY(b,v);
IPOLY2(MONMUL(a,b),v)            := IPOLY(a,v)*IPOLY(b,v);
IPOLY2(MONPOWCONST((a,b),c),v)   := IPOLY(a,v)^b;
IPOLY2(a[b],v)                   := IPOLY(a,v)[b];

IPOLY2(AND(a b),v)               := IPOLY(a,v)&IPOLY(b,v);
IPOLY2(OR(a b),v)                := IPOLY(a,v)|IPOLY(b,v);
IPOLY2(XOR(a b),v)               := IPOLY(a,v)^IPOLY(b,v);
IPOLY2(NOT(a),v)                 := ~IPOLY(a,v);

NORM2(a,q)                       := IPOLY(NORM3(POLY(a,q)),q);
NORM(a,q)                        := IPOLY_NORM(POLY(a,q),q);

POLY( SOLVE(a,b),1 )             := POLYF( SIMPLIFY(SOLVE(a,b)));
POLY( _funct1( a b   ), 1 )      := POLYF( _funct1( SIMPLIFY(a) b ));
POLY( _funct2( a b c ), 1 )      := POLYF( _funct2( SIMPLIFY(a) SIMPLIFY(b) c ));

//Mult
MONMUL( MON(a,b),MON(c,d))                := MON(a*c,b+d);
MONMUL( a,POLYSTORE(b,MON(c,d)) )         := MONADD(MONMUL(a,b),MONMUL(a,MON(c,d)));
MONMUL( POLYSTORE(a,MON(b,c)),d )         := MONADD(MONMUL(a,d),MONMUL(d,MON(b,c)));

//Add
MONADD( MON(a,b),MON(0,c)      )          := MON(a,b);
MONADD( MON(0,c),MON(a,b)      )          := MON(a,b);
MONADD( MON(a,b),MON(c,b)      )          := MON(a+c,b);
MONADD( MON(a,b),MON(c,d)      )          := POLYSTORE(MON(a,b),MON(c,d));
MONADD( POLYSTORE(a,MON(b,c)),MON(d,c)  ) := POLYSTORE( a,MON(d+b,c));
MONADD( POLYSTORE(a,b),MON(d,e)  )        := POLYSTORE( MONADD(a,MON(d,e)), b);
MONADD( a,POLYSTORE(b,c)  )               := MONADD( MONADD(a,b), c );

//Sub
MONSUB( a , b) := MONADD(a,MONNEG(b));

//Neg
MONNEG( MON(a,b))             := MON(-a,b);
MONNEG( POLYSTORE(a,b))       := POLYSTORE(MONNEG(a),MONNEG(b));
MONNEG( MONDIV(a,b))          := MONDIV(MONNEG(a),b);

//Div
MONDIV( MON(a,b),MON(c,d))                 := MON(a/c,b-d);
MONDIV( POLYSTORE(a,MON(b,c)),MON(d,e) )   := MONADD(MONDIV(a,MON(d,e)),MONDIV(MON(b,c),MON(d,e)));

//Pow
MONPOW( MON(a,b), c )            := MON(a^c,b*c);
MONPOW( MON(1,0), b )            := MON(1,0);
MONPOW( a, 1 )                   := a;

MONPOWCONST( a,e,1 )             := MONMUL( MONPOW(a,e-1), a );
MONPOWCONST( a,-e,1)             := MONDIV( MON(1,0), MONPOW(a,e) );

//MONPOW( a,CONSTINT(e) )        := MONMUL( MONPOW(a,e-1), a );
//MONPOW( a,-CONSTINT(e) )       := MONDIV( MON(1,0), MONPOW(a,e) );

//Logic
MON(1,1) |  MON(1,1)      := MON(1,1);
MON(a,0) |  MON(b,0)      := MON(a|b,0);
MON(1,1) &  MON(1,1)      := MON(1,1);
MON(a,0) &  MON(b,0)      := MON(a&b,0);
~MON(a,0)                 := MON(~a,0);

//Poly
POLY(v,v)             := MON(1,1);  
//POLY(_const(a),v)      := MON(a,0);
POLY(a,v)             := MON(a,0);

POLYF(a)              := MON(a,0);

REDUCE_COMPLEX(MON(a,0))         := MON(a,0);
REDUCE_COMPLEX(MON(a,1))         := MON(a,1);
REDUCE_COMPLEX(MON(a,_const(b)))  := REDUCE_COMPLEX(MON(-a,b-2));
REDUCE_COMPLEX(MON(a,-_const(b))) := REDUCE_COMPLEX(MON(-a,2-b));
REDUCE_COMPLEX(POLYSTORE(a,b))   := MONADD(REDUCE_COMPLEX(a),REDUCE_COMPLEX(b));
REDUCE_COMPLEX(MONDIV(a,b))      := MONDIV(REDUCE_COMPLEX(a),REDUCE_COMPLEX(b));

SIMPLIFY(MON(a,b))               := MON(SIMPLIFY(a),SIMPLIFY(b));
SIMPLIFY(POLYSTORE(a,b))         := POLYSTORE(SIMPLIFY(a),SIMPLIFY(b));

RE(POLYSTORE(a,b))               := RE(a)+RE(b);
RE(MON(a,1))                     := 0;
RE(MON(b,0))                     := b;

IM(POLYSTORE(a,b))               := IM(a)+IM(b);
IM(MON(a,1))                     := a;
IM(MON(b,0))                     := 0;

GET_POWER(POLYSTORE(a,b),c)      := GET_POWER(a,c)+GET_POWER(b,c);
GET_POWER(MON(a,b),b)            := a;
GET_POWER(a,b)                   := 0;

NORM3(a)                         := MONDIV(a,MON(GET_POWER(a,1),0));

//IPoly
IPOLY2(MON(a,b),v)               := a*v^b;
IPOLY2(POLYSTORE(a,b),v)         := IPOLY2(a,v)+IPOLY2(b,v);
IPOLY2(MONDIV(a,b),v)            := IPOLY2(a,v)/IPOLY2(b,v);

IPOLY3(MON(a,0),v)               := a;
IPOLY3(MON(a,b),v)               := (a^(1/b)*v)^b;
IPOLY3(POLYSTORE(a,b),v)         := IPOLY3(a,v)+IPOLY3(b,v);
IPOLY5(((a,b),c),v)              := IPOLY3(MONDIV(a,MON(c,0)),v)/IPOLY3(MONDIV(b,MON(c,0)),v);

IPOLY_NORM(MONDIV(a,b),v)        := IPOLY5(((a,b),GET_POWER(b,0)),v);
IPOLY_NORM(a,v)                  := IPOLY3(a,v);

--a          := a    ;
-0           := 0    ;

a==a         :=1     ;
a>=a         :=1     ;
a<=a         :=1     ;
a<>a         :=0     ;
a>a          :=0     ;
a<a          :=0     ;
//!0           :=1     ;
//!1           :=0     ;
!(a==b)      := a<>b ;
!(a<>b)      := a==b ;
!(a<=b)      := a>b  ;
!(a<b)       := a>=b ;
!(a>=b)      := a<b  ;
!(a>b)       := a<=b ;

SIN(-a)      := -SIN(a) ;
COS(-a)      := COS(a) ;
// SIN(a+PI/2)  := COS(a)
// COS(a+PI/2)  := -SIN(a)
// SIN(PI/2+a)  := COS(a)
// COS(PI/2+a)  := -SIN(a)
EXP(-a)      := 1/EXP(a) ;

0+b                := b       ;
a+0                := a       ;
-a+-b              := -(a+b)  ;
-a+b               := b-a     ;
a+-b               := a-b     ;
SIN(a)+SIN(b)      := COS((a-b)/2)*SIN((a+b)/2)*2;
LOG10(a)+LOG10(b)  := LOG10(a*b) ;

0-b                := -b  ;
a-0                := a  ;
a--b               := a+b ;
-a-b               := -(a+b) ;
-a--b              := b-a ;
-(a-b)             := b-a ;
SIN(a)-SIN(b)      := COS((a+b)/2)*SIN((a-b)/2)*2;
LOG10(a)-LOG10(b)  := LOG10(a/b)  ;

0*b              := 0  ;
a*0              := 0  ;
1*b              := b  ;
a*1              := a  ;
-a*-b            := a*b  ;
-a*b             := -(a*b) ; //allow simplification of (-1*a)=>-a
a*-b             := -(a*b) ; // to simplify consts
(a/b)*c          := (a*c)/b   ; //allow simplification of (1/a)*b=>a/b
a*(b/c)          := (a*b)/c   ;
EXP(a)*EXP(b)    := EXP(a+b)  ;
SQRT(a)*SQRT(b)  := SQRT(a*b) ;
SQR(a)*SQR(b)    := SQR(a*b)  ;

0/b              := 0  ;
a/1              := a  ;
a/0              := DIVIDE_BY_ZERO_ERROR();
-a/b             := -(a/b)  ; // to simplify consts
a/-b             := -(a/b)   ; // to simplify consts
a/-b             := -a/b     ;
(a/b)/c          := a/(b*c)  ;

LOG(EXP(1))      := 1         ;
EXP(a)/EXP(b)    := EXP(a-b)  ;
SQRT(a)/SQRT(b)  := SQRT(a/b) ;
SQRT(-_const(a))  := SQRT(a)*j ;
SQR(a)/SQR(b)    := SQR(a/b)  ;

a^0              := 1  ;
0^b              := 0  ;
1^b              := 1  ;
a^1              := a  ;
a^-b             := 1/(a^b) ;

~0       := -1 ;
~-1      := 0  ;
0|b      := b  ;
a|0      := a  ;
-1|b     := -1 ;
a|-1     := -1 ;
0&b      := 0  ;
a&0      := 0  ;
a&-1     := a  ;
-1&b     := b  ;
~a |  a  := -1 ;
 a | ~a  := -1 ;
~a &  a  := 0  ;
 a & ~a  := 0  ;

POLY(a&b,v)               := POLY(a,v)&POLY(b,v);
POLY(a|b,v)               := POLY(a,v)|POLY(b,v);
POLY(~a,v)                := ~POLY(a,v);

BOOL(a==b)         := (a==b);
BOOL(a<>b)         := (a<>b);
BOOL(a>=b)         := (a>=b);
BOOL(a<=b)         := (a<=b);
BOOL(a>b)          := (a>b);
BOOL(a<b)          := (a<b);
BOOL(!a)           := !a   ;
BOOL(a)            := !(a==0);

RE(a)                 := RE(REDUCE_COMPLEX(POLY(a,j)));
IM(a)                 := IM(REDUCE_COMPLEX(POLY(a,j)));

HIER(a GLOBAL(b))     := b;

POLY((a,b),v)         := (POLY(a,v),POLY(b,v)); //parenthesis are important there!!!
POLY({a},v)           := {POLY(a,v)};

IPOLY((a,b),v)        := (IPOLY(a,v),IPOLY(b,v)); //parenthesis are important there!!!
IPOLY({a},v)          := {IPOLY(a,v)};

SIMPLIFY(_const(a))   := a  ;
SIMPLIFY(-_const(a))  := -a ;
SIMPLIFY(_set(a b))   := _set( a SIMPLIFY(b) ); //needed for console app
SIMPLIFY(a)           := SIMPLIFY3(EXPAND2(a));

SIMPLIFY3(a)          := SIMPLIFY2(a,GETVAR(a));
SIMPLIFYELEM(a v)     := SIMPLIFY2(a,v);
SIMPLIFY2(a,1)        := IPOLY(POLY(a,1),1);
SIMPLIFY2(a,v)        := IPOLY(SIMPLIFY(POLY(a,v)),v);

//GETVAR(a,b)           := CHOOSEVAR(  GETVAR(a), GETVAR(b) );
GETVAR(a+b)           := CHOOSEVAR(    GETVAR(a), GETVAR(b) );
GETVAR(a-b)           := CHOOSEVAR(    GETVAR(a), GETVAR(b) );
GETVAR(a*b)           := CHOOSEVAR(    GETVAR(a), GETVAR(b) );
GETVAR(a/b)           := CHOOSEVARDIV( GETVAR(a), GETVAR(b) );
GETVAR(a^b)           := GETVAR(a);
GETVAR(-a)            := GETVAR(a);
GETVAR(_elem(a))      := a;
//GETVAR(a.b)           := a.b;
GETVAR(a)             := 1;

EXPAND(a+b)           := EXPAND2(a)+EXPAND2(b);
EXPAND(a-b)           := EXPAND2(a)-EXPAND2(b);
EXPAND(a*b)           := EXPAND2(a)*EXPAND2(b);
EXPAND(a/b)           := EXPAND2(a)/EXPAND2(b);
EXPAND(a^b)           := EXPAND2(a)^EXPAND2(b);
EXPAND(-a)            := -EXPAND2(a);
EXPAND(a)             := a;

EXPAND2( a )          := EXPAND( _get(a) ); // replace element with its equivalent if any

CHOOSEVAR(1,b)        := b;
CHOOSEVAR(a,1)        := a;
CHOOSEVAR(a,b)        := _rank(a b);
//CHOOSEVAR(a,b)        := ( _eval( _gte( _rank(a) _rank(b) ) ) ? a : b );
CHOOSEVARDIV(1,b)     := b;
CHOOSEVARDIV(a,b)     := a; //No RANK there !!!

DERN(a,b,0)     := a;
DERN(a,b,_const(n))   := DERN(DER(a,b),b,n-1);
DER(_const(a),c) := 0;
DER(c,c)        := 1;
DER(a+b,c)      := DER(a,c)+DER(b,c);
DER(a-b,c)      := DER(a,c)-DER(b,c);
DER(a*b,c)      := b*DER(a,c)+DER(b,c)*a;
DER(a/b,c)      := (b*DER(a,c)-DER(b,c)*a)/SQR(b);
DER(a^b,c)      := DER(a,c)*b*a^(b-1);
DER(-a,c)       := -DER(a,c);
DER(/a,c)       := -DER(a,c)/SQR(a);
DER(SIN(b),c)   := DER(b,c)*COS(b);
DER(COS(b),c)   := -(DER(b,c)*SIN(b));
DER(TAN(b),c)   := DER(b,c)*(1+TAN(b)^2);
DER(ASIN(b),c)  := DER(b,c)/SQRT(1-b^2);
DER(ACOS(b),c)  := -(DER(b,c)/SQRT(1-b^2));
DER(ATAN(b),c)  := DER(b,c)/(1+b^2);
DER(TANH(b),c)  := DER(b,c)*(1-TANH(b)^2);
DER(EXP(b),c)   := DER(b,c)*EXP(b);
DER(LOG(a),c)   := DER(a,c)/a;

//Maxima compatibility
DIFF(a,b,n)  := DERN(a,b,n);

POLY_TED((a,b),v)   := (POLY_TED(a,v),POLY_TED(b,v));
POLY_TED(a+b,v)     := TED_ADD(POLY_TED(a,v),POLY_TED(b,v));
POLY_TED(a-b,v)     := TED_SUB(POLY_TED(a,v),POLY_TED(b,v));
POLY_TED(a*b,v)     := TED_MUL(POLY_TED(a,v),POLY_TED(b,v));
POLY_TED(a/b,v)     := TED_DIV(POLY_TED(a,v),POLY_TED(b,v));
POLY_TED(a^b,v)     := TED_POW(POLY_TED(a,v),POLY_TED(b,v));
POLY_TED(-a,v)      := TED_NEG(POLY_TED(a,v));
POLY_TED(v,v)       := TED(1 0);
POLY_TED(a,v)       := TED(0 a);

TED_ADD(TED(a b),TED(c d)) := TED( a+c b+d );
TED_SUB(TED(a b),TED(c d)) := TED( a-c b-d );
TED_MUL(TED(a b),TED(c d)) := TED( TED(a*c b*c+a*d) b*d ); 
TED_DIV(TED(a b),TED(0 d)) := TED( a/d b/d );
TED_DIV(TED(a b),TED(c d)) := ERROR(8);
TED_POW(TED(a b),TED(0 _const(d))) := TED_MUL(TED(a b),TED_POW(TED(a b),TED(0 d-1)));
TED_POW(TED(a b),TED(0 1)) := TED(a b);
TED_POW(TED(a b),TED(0 0)) := TED(0 1);
TED_POW(TED(a b),TED(c d)) := ERROR(10);
TED_NEG(TED(a b))          := TED( 0-a 0-b );

TED( TED( 0 a ) b ) := TED( a b );

IPOLY_TED((a,b),v)             := (IPOLY_TED(a,v),IPOLY_TED(b,v)); //parenthesis are important there!!!
IPOLY_TED(TED(a b),v)          := a*v+b;

REDUCE(    TED(a b),TED(0 d))  := (TED(a b),TED(0 d));
REDUCE(    TED(0 b),TED(c d))  := (TED(c d),TED(0 b));
REDUCE(    TED(a b),TED(c d))  := (TED(c d),TED(0 c*b-d*a));
REDUCE( e, TED(a b),TED(0 d))  := (REDUCE( e, TED(a b)) , TED(0 d));
REDUCE( e, TED(0 b),TED(c d))  := (REDUCE( e, TED(c d)) , TED(0 b));
REDUCE( e, TED(a b),TED(c d))  := (REDUCE( e, TED(c d)) , TED(0 c*b-d*a));

SOLVE2(TED(TED(a b) c)/e)      := SOLVE2(TED(TED(a b) c));
SOLVE2(TED(TED(a b) c))        := { SIMPLIFY((-b-SQRT(b^2-4*a*c))/(2*a)), SIMPLIFY((-b+SQRT(b^2-4*a*c))/(2*a)) };
SOLVE2(TED(a b)/e)             := SOLVE2(TED(a b));
SOLVE2(TED(a b))               := -b/a;

SYSTEM_SOLVE3({a},{x,y})       := SYSTEM_SOLVE3({IPOLY_TED(REDUCE(POLY_TED(a,y)),y)},{x});
SYSTEM_SOLVE3({a},{x})         := IPOLY_TED(REDUCE(POLY_TED(a,x)),x);
SYSTEM_SOLVE4({a,b},{x,y})     := (SYSTEM_SOLVE4({a},{x}),SYSTEM_SOLVE4({b},{y}));
SYSTEM_SOLVE4({a},{x})         := SOLVE(a,x);

SYSTEM_NORM({a,b})             := (SYSTEM_NORM({a}),SYSTEM_NORM({b}));
SYSTEM_NORM({a})               := NORM2(a,GETVAR(a));
SYSTEM_AUTO_SOLVE3({a,b})      := SYSTEM_SOLVE3({a,b},{GETVAR(b)});
SYSTEM_AUTO_SOLVE2({a},{c,d})  := SYSTEM_AUTO_SOLVE2({SYSTEM_AUTO_SOLVE3({a})},{c});
SYSTEM_AUTO_SOLVE2({a},{c})    := SYSTEM_AUTO_SOLVE3({a});

//entry points
SOLVE(a=b,v)                   := SOLVE(a-b,v);
SOLVE(a,v)                     := SOLVE2(POLY_TED(a,v));
SYSTEM_SOLVE({a},{x})          := {SYSTEM_SOLVE4({SYSTEM_SOLVE3({a},{x})},{x})};
SYSTEM_AUTO_SOLVE({a})         := {SYSTEM_NORM({SYSTEM_AUTO_SOLVE2({a},{a})})};

//vector defined matrix determinant { a*x+b*y..., c*x+d*y... }
DET( {0}, { c    } )           := 0;
DET( {a}, { c, d } )           := DET_LINES( MATRIX_BOTTOM( POLY_TED( a, d ) ), DET_VAR( c ) );
DET( {a}, { c    } )           := DET_LINES( MATRIX_BOTTOM( POLY_TED( a, c ) ) );

DET_LINES( MATRIX_BOTTOM( TED( a b ) ) )                                   := a;
DET_LINES( MATRIX_BOTTOM( TED( a b ) )                    , DET_VAR( 1 ) ) := b;
DET_LINES( MATRIX_BOTTOM( TED( a b ) )                    , DET_VAR( c ) ) := ERROR(6);

DET_LINES( MATRIX_BOTTOM( c, TED( 0 b ) )                 , DET_VAR( e ) ) := 0 - DET_LINES( MATRIX_BOTTOM( c ), MATRIX_TOP(     TED( 0 b ) ), DET_VAR( e ) );
DET_LINES( MATRIX_BOTTOM( c, TED( 0 b ) ), MATRIX_TOP( d ), DET_VAR( e ) ) := 0 - DET_LINES( MATRIX_BOTTOM( c ), MATRIX_TOP( d , TED( 0 b ) ), DET_VAR( e ) );
DET_LINES( MATRIX_BOTTOM(    TED( 0 b ) ), MATRIX_TOP( c ), DET_VAR( e ) ) := 0;

DET_LINES( MATRIX_BOTTOM( c, TED( a b ) )                 , DET_VAR( e ) ) := a * DET( {TED_TO_MATRIX( c )},                     { e } ) - DET_LINES( MATRIX_BOTTOM( c ), MATRIX_TOP(     TED( a b ) ), DET_VAR( e ) );
DET_LINES( MATRIX_BOTTOM( c, TED( a b ) ), MATRIX_TOP( d ), DET_VAR( e ) ) := a * DET( {TED_TO_MATRIX( VECT_REVERSE1( d, c ) )}, { e } ) - DET_LINES( MATRIX_BOTTOM( c ), MATRIX_TOP( d , TED( a b ) ), DET_VAR( e ) );
DET_LINES( MATRIX_BOTTOM(    TED( a b ) ), MATRIX_TOP( c ), DET_VAR( e ) ) := a * DET( {TED_TO_MATRIX( VECT_REVERSE1(    c ) )}, { e } );

// common defined matrix determinant { {a,b,...}, {c,d,...}, ... }
DET( {0} ) := 0;
DET( {a} ) := MAT_DET_LINES( MATRIX_BOTTOM( a ) );

MAT_DET_LINES( MATRIX_BOTTOM( { a }    ) ) := a;
MAT_DET_LINES( MATRIX_BOTTOM( { a, b } ) ) := ERROR(6);

MAT_DET_LINES( MATRIX_BOTTOM( c, { a, 0 } )                  ) := 0 - MAT_DET_LINES( MATRIX_BOTTOM( c ), MATRIX_TOP(     { a, 0 } ) );
MAT_DET_LINES( MATRIX_BOTTOM( c, { a, 0 } ), MATRIX_TOP( d ) ) := 0 - MAT_DET_LINES( MATRIX_BOTTOM( c ), MATRIX_TOP( d , { a, 0 } ) );
MAT_DET_LINES( MATRIX_BOTTOM(    { a, 0 } ), MATRIX_TOP( c ) ) := 0;

MAT_DET_LINES( MATRIX_BOTTOM( c, { a, b } )                  ) := b * DET( { MAT_REM_HEAD( c                     ) } ) - MAT_DET_LINES( MATRIX_BOTTOM( c ), MATRIX_TOP(     { a, b } ) );
MAT_DET_LINES( MATRIX_BOTTOM( c, { a, b } ), MATRIX_TOP( d ) ) := b * DET( { MAT_REM_HEAD( VECT_REVERSE1( d, c ) ) } ) - MAT_DET_LINES( MATRIX_BOTTOM( c ), MATRIX_TOP( d , { a, b } ) );
MAT_DET_LINES( MATRIX_BOTTOM(    { a, b } ), MATRIX_TOP( c ) ) := b * DET( { MAT_REM_HEAD( VECT_REVERSE1( c )    ) } );

// { {...,a,b}, {...,c,d}, ... } -> { {...,a}, {...,c}, ... }
MAT_REM_HEAD( a, {c,d}) := ( MAT_REM_HEAD( a ), {c} );
MAT_REM_HEAD(    {c,d}) := {c};

//MATRIX HELP FUNCTIONS
TED_TO_MATRIX( c , TED( a b ) )   := CHECK_NULL( TED_TO_MATRIX( c ), b );
TED_TO_MATRIX(     TED( a b ) )   := b;
TED_TO_MATRIX(  a, b    )         := ERROR(7);

CHECK_NULL( a , 0 )               := 0;
CHECK_NULL( 0 , a )               := 0;
CHECK_NULL( a , b )               := (a,b);

//Matrix multiplication
VECT_MUL_ADD( {a,b},{c,d} ) := VECT_MUL_ADD( {a},{c} ) + b*d;
VECT_MUL_ADD( {  b},{  d} ) :=                           b*d;

MAT_MUL(a,b)         := { MAT_MUL3(a,MAT_TRANSPOSE(b)) }; 

MAT_MUL3({a,b},c)  := ( MAT_MUL3({a},c), { MAT_MUL4(b,c) } );
MAT_MUL3({  b},c)  :=                    { MAT_MUL4(b,c) };

MAT_MUL4(b,{c,d})  := ( MAT_MUL4(b,{c}), VECT_MUL_ADD(b,d) );
MAT_MUL4(b,{  d})  :=                    VECT_MUL_ADD(b,d) ;

//Matrix transposition
MAT_TRANSPOSE( {a} )        := { MAT_TRANSPOSE1( a ) };
MAT_TRANSPOSE1( a,{b,c} )   := ( MAT_TRANSPOSE1( MAT_REM_HEAD( a ), {b} ), { MAT_TRANSPOSE_VECT( {a,{b,c}} ) } );
MAT_TRANSPOSE1( a )         :=                                             { MAT_TRANSPOSE_VECT( {a} )       } ;

MAT_TRANSPOSE_VECT( {a,{b,c}} ) := ( MAT_TRANSPOSE_VECT( {a} ), c );
MAT_TRANSPOSE_VECT( {{b,c}} )   := c;

MAT_TRANSPOSE_VECT( {a,{c}} ) := ( MAT_TRANSPOSE_VECT( {a} ), c );
MAT_TRANSPOSE_VECT( {{c}} )   := c;

// Vector reversal {x,y,z} -> {z,y,x}
VECT_REVERSE( {a} )        := { VECT_REVERSE1( a ) };
VECT_REVERSE1( a, b )      := VECT_REVERSE2( VECT_QUEUE(b), a );
VECT_REVERSE1( a )         := a;
VECT_REVERSE2( VECT_QUEUE(a), (b, c) ) := VECT_REVERSE2( VECT_QUEUE(a,c), b);
VECT_REVERSE2( VECT_QUEUE(a),  b     ) := (a,b);

//vector add
(a,b)+(c,d)    := (a+c,b+d);
(a,b)+c        := (a,b+c);
c+(a,b)        := (a,c+b);
{a}+{b}        := {a+b};

//vector sub
(a,b)-(c,d)    := (a-c,b-d);
(a,b)-c        := (a,b-c);
c-(a,b)        := (-a,c-b);
{a}-{b}        := {a-b};

//vector mul
(a,b)*(c,d)    := (a*(c,d),b*(c,d));
a*(c,d)        := (a*c,a*d);
(c,d)*a        := (c*a,d*a);
{a}*{b}        := {a*b};
a*{b}          := {a*b};
{a}*b          := {a*b};

//Vector or
/*(a,b)|(c,d)    := (a|c,b|d);
(a,b)|c        := (a|c,b);
c|(a,b)        := (c|a,b);
{a}|{b}        := {a|b};

//Vector xor
(a,b)^(c,d)    := (a^c,b^d);
(a,b)^c        := (a^c,b);
c^(a,b)        := (c^a,b);
{a}^{b}        := {a^b};*/

//Vector minus
-(a,b)         := (-a,-b);

//Vector not
~(a,b)         := (~a,~b);

//vector min
MIN({a})       := MIN(a);
MIN((a,b),c)   := MIN(a,MIN(b,c));

//vector max
MAX({a})       := MAX(a);
MAX((a,b),c)   := MAX(a,MAX(b,c));

//vector creation
ZEROES(_const(a)) := ( ( a == 1 )  ? 0 : (ZEROES(a-1),0) );
ONES(_const(a))   := ( ( a == 1 )  ? 1 : (ONES(a-1),1) );

RANGE( _const(a) _const(b) ):= ( (a < b) ? ( RANGE( a b-1 ), b ): a);
SIN(a,b)                  := (SIN(a),SIN(b));
COS(a,b)                  := (COS(a),COS(b));
TAN(a,b)                  := (TAN(a),TAN(b));

VSIZE({a,b})              := VSIZE({a})+1;
VSIZE(a)                  := 1;
{a}[_const(c)]            := INVAT({a}, VSIZE({a}) -1 - c );
INVAT({a,b},0)            := b;
INVAT({a,b},_const(c))    := INVAT({a},c-1);
INVAT({a},0)              := a;
INVAT({a},-_const(b))     := ERROR(0);

SUBST2(a x xo)            := SIMPLIFY(SUBST(a x xo));
TAYLOR(a,x,xo,0)          := SUBST2(a x xo);
TAYLOR(a,x,xo,_const(n))  := TAYLOR(a,x,xo,n-1)+SUBST2(DERN(a,x,n) x xo)*(x-xo)^n/n!;

SUBST( _funct1(   b c ) x xo  )   := _funct1( SUBST( b x xo ) c );
SUBST( _funct2( a b c ) x xo  )   := _funct2( SUBST( a x xo ) SUBST( b x xo ) c );
SUBST( x                x xo  )   := xo;
SUBST( a                x xo  )   := a;

ASSERT(1)    := 0;
ASSERT(x)    := ERROR(1);

PI := 3.14159265358979323846264338327950288;

ADD(   _const(a)  _const(b)  )  := _eval( _add( a b )  );
SUB(   _const(a)  _const(b)  )  := _eval( _sub( a b )  );
OR(    _const(a)  _const(b)  )  := _eval( _or(  a b )   );
LOR(   _const(a)  _const(b)  )  := _eval( _lor( a b )  );
XOR(   _const(a)  _const(b)  )  := _eval( _xor( a b )  );
MUL(   _const(a)  _const(b)  )  := _eval( _mul( a b )  );
DIV(   _const(a)  _const(b)  )  := _eval( _div( a b )  );
AND(   _const(a)  _const(b)  )  := _eval( _and( a b )  );
LAND(  _const(a)  _const(b)  )  := _eval( _land( a b ) );
EQ(    _const(a)  _const(b)  )  := _eval( _eq(  a b )   );
NEQ(   _const(a)  _const(b)  )  := _eval( _neq( a b )  );
LTE(   _const(a)  _const(b)  )  := _eval( _lte( a b )  );
SHL(   _const(a)  _const(b)  )  := _eval( _shl( a b )  );
LT(    _const(a)  _const(b)  )  := _eval( _lt(  a b )   );
GTE(   _const(a)  _const(b)  )  := _eval( _gte( a b )  );
SHR(   _const(a)  _const(b)  )  := _eval( _shr( a b )  );
GT(    _const(a)  _const(b)  )  := _eval( _gt(  a b )   );
MIN(   _const(a), _const(b)  )  := _eval( _min( a b )  );
MAX(   _const(a), _const(b)  )  := _eval( _max( a b )  );
MOD(   _const(a), _const(b)  )  := _eval( _mod( a b )  );
POW(   _const(a)  _const(b)  )  := _eval( _pow( a b )  );
//NEG(   _const(a)             )  := _eval( _neg( a )    );
INV(   _const(a)             )  := _eval( _inv( a )    );
NOT(   _const(a)             )  := _eval( _not( a )    );
ID(    _const(a)             )  := _eval( _id(  a )     );
BOOL(  _const(a)             )  := _eval( _bool( a )   );
LNOT(  _const(a)             )  := _eval( _lnot( a )   );
SIN(   _const(a)             )  := _eval( _sin( a )    );
COS(   _const(a)             )  := _eval( _cos( a )    );
TAN(   _const(a)             )  := _eval( _tan( a )    );
ASIN(  _const(a)             )  := _eval( _asin( a )   );
ACOS(  _const(a)             )  := _eval( _acos( a )   );
ATAN(  _const(a)             )  := _eval( _atan( a )   );
SINH(  _const(a)             )  := _eval( _sinh( a )   );
COSH(  _const(a)             )  := _eval( _cosh( a )   );
TANH(  _const(a)             )  := _eval( _tanh( a )   );
ASINH( _const(a)             )  := _eval( _asinh( a )  );
ACOSH( _const(a)             )  := _eval( _acosh( a )  );
ATANH( _const(a)             )  := _eval( _atanh( a )  );
EXP(   _const(a)             )  := _eval( _exp( a )    );
LOG(   _const(a)             )  := _eval( _log( a )    );
LOG10( _const(a)             )  := _eval( _log10( a )  );
SQRT(  _const(a)             )  := _eval( _sqrt( a )   );
SQR(   _const(a)             )  := _eval( _sqr( a )    );
FACT(  _const(a)             )  := _eval( _fact( a )   );
ABS(   _const(a)             )  := _eval( _abs( a )    );
FLOOR( _const(a)             )  := _eval( _floor( a )  );
CEIL(  _const(a)             )  := _eval( _ceil( a )   );
RAND(                        )  := _eval( _rand()      );

MAKE_EVAL( ADD(   a b ) )  := _add(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( SUB(   a b ) )  := _sub(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( OR(    a b ) )  := _or(    MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( LOR(   a b ) )  := _lor(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( XOR(   a b ) )  := _xor(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( MUL(   a b ) )  := _mul(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( DIV(   a b ) )  := _div(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( AND(   a b ) )  := _and(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( LAND(  a b ) )  := _land(  MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( EQ(    a b ) )  := _eq(    MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( NEQ(   a b ) )  := _neq(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( LTE(   a b ) )  := _lte(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( SHL(   a b ) )  := _shl(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( LT(    a b ) )  := _lt(    MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( GTE(   a b ) )  := _gte(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( SHR(   a b ) )  := _shr(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( GT(    a b ) )  := _gt(    MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( MIN(   a,b ) )  := _min(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( MAX(   a,b ) )  := _max(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( MOD(   a,b ) )  := _mod(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( POW(   a b ) )  := _pow(   MAKE_EVAL( a ) MAKE_EVAL( b ) ) ;
MAKE_EVAL( IF2((a:b) c ) ) := _if(    MAKE_EVAL( a ) MAKE_EVAL( b ) MAKE_EVAL( c ) ) ;
MAKE_EVAL( IF( (a:b) c ) ) := _if(    MAKE_EVAL( a ) MAKE_EVAL( b ) MAKE_EVAL( c ) ) ; 
MAKE_EVAL( NEG(   a   ) )  := _neg(   MAKE_EVAL( a ) ) ;
MAKE_EVAL( INV(   a   ) )  := _inv(   MAKE_EVAL( a ) ) ;
MAKE_EVAL( NOT(   a   ) )  := _not(   MAKE_EVAL( a ) ) ;
MAKE_EVAL( ID(    a   ) )  := _id(    MAKE_EVAL( a ) ) ;
MAKE_EVAL( BOOL(  a   ) )  := _bool(  MAKE_EVAL( a ) ) ;
MAKE_EVAL( LNOT(  a   ) )  := _lnot(  MAKE_EVAL( a ) ) ;
MAKE_EVAL( SIN(   a   ) )  := _sin(   MAKE_EVAL( a ) ) ;
MAKE_EVAL( COS(   a   ) )  := _cos(   MAKE_EVAL( a ) ) ;
MAKE_EVAL( TAN(   a   ) )  := _tan(   MAKE_EVAL( a ) ) ;
MAKE_EVAL( ASIN(  a   ) )  := _asin(  MAKE_EVAL( a ) ) ;
MAKE_EVAL( ACOS(  a   ) )  := _acos(  MAKE_EVAL( a ) ) ;
MAKE_EVAL( ATAN(  a   ) )  := _atan(  MAKE_EVAL( a ) ) ;
MAKE_EVAL( SINH(  a   ) )  := _sinh(  MAKE_EVAL( a ) ) ;
MAKE_EVAL( COSH(  a   ) )  := _cosh(  MAKE_EVAL( a ) ) ;
MAKE_EVAL( TANH(  a   ) )  := _tanh(  MAKE_EVAL( a ) ) ;
MAKE_EVAL( ASINH( a   ) )  := _asinh( MAKE_EVAL( a ) ) ;
MAKE_EVAL( ACOSH( a   ) )  := _acosh( MAKE_EVAL( a ) ) ;
MAKE_EVAL( ATANH( a   ) )  := _atanh( MAKE_EVAL( a ) ) ;
MAKE_EVAL( EXP(   a   ) )  := _exp(   MAKE_EVAL( a ) ) ;
MAKE_EVAL( LOG(   a   ) )  := _log(   MAKE_EVAL( a ) ) ;
MAKE_EVAL( LOG10( a   ) )  := _log10( MAKE_EVAL( a ) ) ;
MAKE_EVAL( SQRT(  a   ) )  := _sqrt(  MAKE_EVAL( a ) ) ;
MAKE_EVAL( SQR(   a   ) )  := _sqr(   MAKE_EVAL( a ) ) ;
MAKE_EVAL( FACT(  a   ) )  := _fact(  MAKE_EVAL( a ) ) ;
MAKE_EVAL( ABS(   a   ) )  := _abs(   MAKE_EVAL( a ) ) ;
MAKE_EVAL( FLOOR( a   ) )  := _floor( MAKE_EVAL( a ) ) ;
MAKE_EVAL( CEIL(  a   ) )  := _ceil(  MAKE_EVAL( a ) ) ;
MAKE_EVAL( RAND()       )  := _rand()                  ;
MAKE_EVAL( _const( a ) )   := a ;
MAKE_EVAL( _elem( a ) )    := a ;
MAKE_EVAL( a )             := ERROR(2);

DO_EVAL( a )               := _eval( MAKE_EVAL( a ) );
