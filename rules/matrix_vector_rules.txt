
POLY_TED((a,b),v)   := (POLY_TED(a,v),POLY_TED(b,v));
POLY_TED(a+b,v)     := TED_ADD(POLY_TED(a,v),POLY_TED(b,v));
POLY_TED(a-b,v)     := TED_SUB(POLY_TED(a,v),POLY_TED(b,v));
POLY_TED(a*b,v)     := TED_MUL(POLY_TED(a,v),POLY_TED(b,v));
POLY_TED(a/b,v)     := TED_DIV(POLY_TED(a,v),POLY_TED(b,v));
POLY_TED(a^b,v)     := TED_POW(POLY_TED(a,v),POLY_TED(b,v));
POLY_TED(-a,v)      := TED_NEG(POLY_TED(a,v));
POLY_TED(v,v)       := TED(1 0);
POLY_TED(a,v)       := TED(0 a);

TED_ADD(TED(a b),TED(c d)) := TED( a+c b+d );
TED_SUB(TED(a b),TED(c d)) := TED( a-c b-d );
TED_MUL(TED(a b),TED(c d)) := TED( TED(a*c b*c+a*d) b*d ); 
TED_DIV(TED(a b),TED(0 d)) := TED( a/d b/d );
TED_DIV(TED(a b),TED(c d)) := ERROR(8);
TED_POW(TED(a b),TED(0 1)) := TED(a b);
TED_POW(TED(a b),TED(0 0)) := TED(0 1);
TED_POW(TED(a b),TED(c d)) := ERROR(10);
TED_NEG(TED(a b))          := TED( 0-a 0-b );
TED_POW(TED(a b),TED(0 _const(d))) := TED_MUL(TED(a b),TED_POW(TED(a b),TED(0 d-1)));

TED( TED( 0 a ) b ) := TED( a b );

IPOLY_TED((a,b),v)             := (IPOLY_TED(a,v),IPOLY_TED(b,v)); //parenthesis are important there!!!
IPOLY_TED(TED(a b),v)          := a*v+b;

REDUCE(    TED(a b),TED(0 d))  := (TED(a b), TED(0 d));
REDUCE(    TED(0 b),TED(c d))  := (TED(c d), TED(0 b));
REDUCE(    TED(a b),TED(c d))  := (TED(c d), TED(0 c*b-d*a));
REDUCE( e, TED(a b),TED(0 d))  := (REDUCE( e, TED(a b)), TED(0 d));
REDUCE( e, TED(0 b),TED(c d))  := (REDUCE( e, TED(c d)), TED(0 b));
REDUCE( e, TED(a b),TED(c d))  := (REDUCE( e, TED(c d)), TED(0 c*b-d*a));

SOLVE2(TED(TED(a b) c)/e)      := SOLVE2(TED(TED(a b) c));
SOLVE2(TED(TED(a b) c))        := { SIMPLIFY((-b-SQRT(b^2-4*a*c))/(2*a)), SIMPLIFY((-b+SQRT(b^2-4*a*c))/(2*a)) };
SOLVE2(TED(a b)/e)             := SOLVE2(TED(a b));
SOLVE2(TED(a b))               := -b/a;

SYSTEM_SOLVE3({a},{x,y})       := SYSTEM_SOLVE3({IPOLY_TED(REDUCE(POLY_TED(a,y)),y)},{x});
SYSTEM_SOLVE3({a},{x})         := IPOLY_TED(REDUCE(POLY_TED(a,x)),x);

SYSTEM_SOLVE4({a,b},{x,y})     := (SYSTEM_SOLVE4({a},{x}),SYSTEM_SOLVE4({b},{y}));
SYSTEM_SOLVE4({a},{x})         := SOLVE(a,x);

POLY_NORM(TED(a b),v)          := (v=-b/a);
VECTOR_NORM(a,b)               := POLY_NORM(POLY_TED(a,b),b);

SYSTEM_NORM({a,b})             := (SYSTEM_NORM({a}),SYSTEM_NORM({b}));
SYSTEM_NORM({a})               := VECTOR_NORM(a,GETVAR(a));

SYSTEM_AUTO_SOLVE3({a,b})      := SYSTEM_SOLVE3({a,b},{GETVAR(b)});
SYSTEM_AUTO_SOLVE2({a},{c,d})  := SYSTEM_AUTO_SOLVE2({SYSTEM_AUTO_SOLVE3({a})},{c});
SYSTEM_AUTO_SOLVE2({a},{c})    := SYSTEM_AUTO_SOLVE3({a}); //end

//entry points
SOLVE(a=b,v)                   := SOLVE(a-b,v);
SOLVE(a,v)                     := SOLVE2(POLY_TED(a,v));

//Anciennes fonctions toujours OK
SYSTEM_SOLVE_LEGACY({a},{x})          := {SYSTEM_SOLVE4({SYSTEM_SOLVE3({a},{x})},{x})};
SYSTEM_AUTO_SOLVE_LEGACY({a})         := {SYSTEM_NORM({SYSTEM_AUTO_SOLVE2({a},{a})})};

VECT_TO_LIST(a;b) := (VECT_TO_LIST(a),b);
VECT_TO_LIST(a)   := a;
VECT_TO_LIST({a}) := {VECT_TO_LIST(a)};

/**********************************************************************************/
//vector defined matrix determinant { a*x+b*y..., c*x+d*y... }
TED_1( TED( a b ) ) := a;
DET({a}, {b}) := TED_1( DET_LINES2( {a}, {b}, VSIZE({a}) ) );

/**********************************************************************************/
TED_MUL2( a, TED( b c ) ) := TED( a*b a*c );

// TODO: give result like this {a}, {b}, {c} where c is the comatrix values, a is the unknown coefficient column and b is the source column.
/* works also
DET_LINES( { { c, TED( a b ) }        }, { e } ) := TED_SUB( TED_MUL2( a , DET_LINES2( {TED_TO_MATRIX( c )    }, {          e  } ) ), DET_LINES( { { c }, {     TED( a b ) } }, { e } ) );
DET_LINES( { { c, TED( a b ) }, { d } }, { e } ) := TED_SUB( TED_MUL2( a , DET_LINES2( {TED_TO_MATRIX( d, c ) }, { VECT_ROR(e) } ) ), DET_LINES( { { c }, { d , TED( a b ) } }, { e } ) );
DET_LINES( { {    TED( a b ) }, { c } }, { e } ) :=          TED_MUL2( a , DET_LINES2( {TED_TO_MATRIX(    c ) }, { VECT_ROR(e) } ) );
*/

// Normal case
// DET_LINES( { {    TED( a b ) }        }, { c } ) := TED( a b );
// DET_LINES( { { c, TED( a b ) }        }, { e } ) := TED_SUB( TED_MUL2( a , DET_LINES2( { ( TED_TO_MATRIX(              c   ) ) }, { e } ) ), DET_LINES( { { c }, {     TED( a b ) } }, { e } ) );
// DET_LINES( { { c, TED( a b ) }, { d } }, { e } ) := TED_SUB( TED_MUL2( a , DET_LINES2( { VECT_ROR( TED_TO_MATRIX( ( d, c ) ) ) }, { e } ) ), DET_LINES( { { c }, { d , TED( a b ) } }, { e } ) );
// DET_LINES( { {    TED( a b ) }, { c } }, { e } ) :=          TED_MUL2( a , DET_LINES2( { VECT_ROR( TED_TO_MATRIX( (    c ) ) ) }, { e } ) );

// //Optimisation
// DET_LINES( { { c, TED( 0 b ) }        }, { e } ) := TED_NEG( DET_LINES( { { c }, {     TED( 0 b ) } }, { e } ) );
// DET_LINES( { { c, TED( 0 b ) }, { d } }, { e } ) := TED_NEG( DET_LINES( { { c }, { d , TED( 0 b ) } }, { e } ) );
// DET_LINES( { {    TED( 0 b ) }, { c } }, { e } ) := TED( 0 0 );

//DET_LINES( {  a,  TED( d e )  }, { f }, n ) := TED_ADD( TED_MUL2( d, DET_LINES2( { TED_TO_MATRIX( a ) }, { f } ) ), TED_MUL2( -((n-(n/2)*2)*4-1), DET_LINES( { VECT_ROR( a, TED( d e ) ) }, { f }, n - 1 ) ) );
//DET_LINES( {  a,  TED( d e )  }, { f }, 1 ) :=          TED_MUL2( d, DET_LINES2( { TED_TO_MATRIX( a ) }, { f } ) );

/* OK 3x3
DET_LINES2( {a}, { c    } ) := POLY_TED( a, c );
DET_LINES2( {a}, { c, d } ) := DET_LINES( { POLY_TED( a, d ) }, { c }, 1, VSIZE( {a}) );
DET_LINES( {  a,  TED( d e )  }, { f }, g, n ) := TED_ADD( TED_MUL2(   d, DET_LINES2( { TED_TO_MATRIX( a ) }, { f } ) ), DET_LINES( { VECT_ROR( a, TED( d e ) ) }, { f }, -g, n - 1 ) );
DET_LINES( {  a,  TED( d e )  }, { f }, g, 1 ) :=          TED_MUL2( g*d, DET_LINES2( { TED_TO_MATRIX( a ) }, { f } ) );
//DET_LINES( {  a,  TED( d e )  }, { f }, -1, 1 ) :=          TED_MUL2( -d, DET_LINES2( { TED_TO_MATRIX( a ) }, { f } ) );
*/

//La rotation avec VECT_ROR() fait changer le signe du déterminant pour un nombre de paramètres pairs
DET_LINES2({a}, {c}, m)    := POLY_TED(a, c);
DET_LINES2({a}, {c, d}, m) := DET_LINES({POLY_TED(a, d)}, {c}, m, m); // VSIZE( {a}) );
DET_LINES3({a}, {f}, m, d) := TED_MUL2(d, DET_LINES2({TED_TO_MATRIX(a)}, {f}, m));
DET_LINES3({a}, {f}, m, 0) := TED(0 0);
DET_LINES({a, TED(d e)}, {f}, m, n) := TED_ADD(DET_LINES3({a}, {f}, m - 1, d), TED_MUL2(VSIGN2(m), DET_LINES({VECT_ROR(a, TED(d e))}, {f}, m, n - 1)));
DET_LINES({a, TED(d e)}, {f}, m, 1) := DET_LINES3({a}, {f}, m - 1, d);
// Astuce ; avec VECT_ROR(), pas besoin de transférer l'arbre de droite vers la gauche.
TED_TO_MATRIX(c, TED(a b)) := (TED_TO_MATRIX(c), b);
TED_TO_MATRIX(TED(a b)) := b;
TED_TO_MATRIX(a, b) := ERROR(7);
/*
VECT_SWAP( { a, b   }, n ) := ERROR(8);
VECT_SWAP( { a, b   }, 1 ) := (b,a);
VECT_SWAP( { a, b, c}, n ) := ( VECT_SWAP( {a, c}, n-1 ), b);
VECT_SWAP( { a, b, c}, 1 ) := ( a, c, b);
VECT_SWAP( { a }, 0 ) := a;
//VECT_SWAP( { a, b, c}, 1 ) := ( a, b);
*/
VSIGN( a )    := 1;
VSIGN( a, b ) := -VSIGN(a);
VSIGN( a, b, c, d ) := -VSIGN(a);
VSIGN( a, b, c, d, e, f, g, h ) := -VSIGN(a);
/**********************************************************************************/
//IPOLY_TED3((a,b),v)    := (IPOLY_TED3(a,v), IPOLY_TED3(b,v)); //parenthesis are important there!!!
IPOLY_TED3(TED(a b))          := -b/a;
SYSTEM_SOLVEN({a},{x}, m, n ) := ( SYSTEM_SOLVEN({a},{VECT_ROR(x)}, m, n-1 ), SYSTEM_SOLVE0({a},{x},m) );
SYSTEM_SOLVEN({a},{x}, m, 1 ) :=   SYSTEM_SOLVE0({a},{x}, m); // end of recursion
SYSTEM_SOLVE0({a},{x}, m)     :=   IPOLY_TED3( DET_LINES2( {a}, {x}, m ) );
SYSTEM_SOLVE({a},{x})         := {  SYSTEM_SOLVEN( {a}, {VECT_ROR(x)}, VSIZE({a}), VSIZE({a}) ) }; 

/**********************************************************************************/
IPOLY_TED4(TED(a b), v)            := (v=-b/a);
SYSTEM_AUTO_SOLVEN({a},{x}, m, n ) := ( SYSTEM_AUTO_SOLVEN({a},{VECT_ROR(x)}, m, n-1 ), SYSTEM_AUTO_SOLVE0({a},{x}, m) );
SYSTEM_AUTO_SOLVEN({a},{x}, m, 1 ) :=   SYSTEM_AUTO_SOLVE0({a},{x},m); // end of recursion
SYSTEM_AUTO_SOLVE0({a},{x}, m)     :=   IPOLY_TED4( DET_LINES2( {a}, {x}, m ), VECT_HEAD(x) );
SYSTEM_AUTO_SOLVE({a})             := {  SYSTEM_AUTO_SOLVEN( {a}, {GET_VAR_LIST(a)}, VSIZE({a}), VSIZE({a}) )  };

/**********************************************************************************/
// common defined matrix determinant { {a,b,...}, {c,d,...}, ... }
//DET( {{a}} ) := a;
DET( {a} ) := MAT_DET_LINES( { a }, VSIZE( {a}) );

MAT_DET_LINES( { c, { a, b } }, n ) := b * MAT_DET_LINES( { MAT_REM_HEAD( c ) }, VSIZE({c}) ) - VSIGN( c ) * MAT_DET_LINES( { VECT_ROR(c, {a,b} ) }, n-1 );
MAT_DET_LINES( { c, { a, b } }, 1 ) := b * MAT_DET_LINES( { MAT_REM_HEAD( c ) }, VSIZE({c}) );
MAT_DET_LINES( {    {    b } }, 1 ) := b;

// { {...,a,b}, {...,c,d}, ... } -> { {...,a}, {...,c}, ... }
MAT_REM_HEAD( a, {c,d}) := ( MAT_REM_HEAD( a ), {c} );
MAT_REM_HEAD(    {c,d}) := {c};

/**********************************************************************************/
//Matrix inversion
// common defined matrix determinant { {a,b,...}, {c,d,...}, ... }
MAT_INV( {a,b} ) := { MAT_INV_COLS( {a,b}, b ) } / DET( {a,b} );
MAT_INV( {a}   ) := { a };

MAT_INV_COLS( {a}, {b,c} ) := ( MAT_INV_COLS( { -MAT_ROR_LINES( {a} ) }, {b} ), { MAT_INV_LINES( { MAT_REM_HEAD(a) }, {a} ) } ); // {b,c} is used as an iterator
MAT_INV_COLS( {a}, {b} )   :=                                                   { MAT_INV_LINES( { MAT_REM_HEAD(a) }, {a} ) };

MAT_INV_LINES( {a,b}, {c,d} ) := ( MAT_INV_LINES( { -VECT_ROR( a, b ) }, {c} ), DET( { a } ) ); // {c,d} is used as an iterator
MAT_INV_LINES( {a,b}, {c} )   := DET( { a } );

//{{a,b,c,d},{e,f,g,h}} -> {{d,a,b,c},{h,e,f,g}}
MAT_ROR_LINES( {a,{b}} ) := ( MAT_ROR_LINES( {a} ), { VECT_ROR( b ) } );
MAT_ROR_LINES( {{b}} )   := { VECT_ROR( b ) };

//(a,b,c,d) -> (d,a,b,c)
VECT_ROR( ( a, b, c, d, e, f, g, h ), i ) := ( VECT_ROR( a, i ), b, c, d, e, f, g, h );
VECT_ROR( ( a, b, c, d ), e ) := ( VECT_ROR( a, e ), b, c, d );
VECT_ROR( ( a, b ), c ) := ( VECT_ROR( a, c ), b );
VECT_ROR( a, c ) := ( c , a );
VECT_ROR( a ) := a;

VECT_ROL( a, b )   := ( VECT_REM_HEAD( a ), b, VECT_HEAD( a ) );
VECT_ROL( a )      := a;
VECT_REM_HEAD( a, b, c ) := ( VECT_REM_HEAD( a, b ), c);
VECT_REM_HEAD( a, b )    := b;
VECT_HEAD( a, b ) := VECT_HEAD(a);
VECT_HEAD( a )    := a;

//Matrix multiplication
VECT_MUL_ADD( {a,b}, {c,d} ) := VECT_MUL_ADD( {a},{c} ) + b*d;
VECT_MUL_ADD( {  b}, {  d} ) :=                           b*d;

MAT_MUL(a,b)       := { MAT_MUL3(a, MAT_TRANSPOSE(b)) }; 

MAT_MUL3({a,b},c)  := ( MAT_MUL3({a},c), { MAT_MUL4(b,c) } );
MAT_MUL3({  b},c)  :=                    { MAT_MUL4(b,c) };

MAT_MUL4(b,{c,d})  := ( MAT_MUL4(b,{c}), VECT_MUL_ADD(b,d) );
MAT_MUL4(b,{  d})  :=                    VECT_MUL_ADD(b,d) ;

//Matrix transposition
MAT_TRANSPOSE( {a} )        := { MAT_TRANSPOSE1( a ) };
MAT_TRANSPOSE1( a,{b,c} )   := ( MAT_TRANSPOSE1( MAT_REM_HEAD( a ), {b} ), { MAT_TRANSPOSE_VECT( {a,{b,c}} ) } );
MAT_TRANSPOSE1( a )         :=                                             { MAT_TRANSPOSE_VECT( {a} )       } ;

MAT_TRANSPOSE_VECT( {a,{b,c}} ) := ( MAT_TRANSPOSE_VECT( {a} ), c );
MAT_TRANSPOSE_VECT( {{b,c}} )   := c;

MAT_TRANSPOSE_VECT( {a,{c}} ) := ( MAT_TRANSPOSE_VECT( {a} ), c );
MAT_TRANSPOSE_VECT( {{c}} )   := c;

// Vector reversal {x,y,z,t} -> {t,z,y,x} (see VECT_ROR)
VECT_REVERSE( {a} )        := { VECT_REVERSE1( a ) };
VECT_REVERSE1( a, b )      := VRIGHT_TO_LEFT( b, a );
VECT_REVERSE1( a )         := a;

VRIGHT_TO_LEFT( a, (b, c) ) := VRIGHT_TO_LEFT( (a, c), b);
VRIGHT_TO_LEFT( a,  b     ) := (a,b);

//vector permutation ( TO DO )
//VECT_PERMUTE( {a} )           := { VECT_PERMUTE_ITER( a, {a} ) };
//VECT_PERMUTE_ITER( a, {b,c} ) := ( VECT_PERMUTE_ITER( VECT_ROR( a ), {b} ), VECT_PERMUTE_ITER( VECT_PERMUTE_LAST( a ), {b} ) ); // b is used as iterator
//VECT_PERMUTE_ITER( a, {b} )   := { a };
//VECT_PERMUTE_ITER( a, {b} )   := ( { a }, { VECT_PERMUTE_LAST( a ) } ); // b is used as iterator

//VECT_PERMUTE_LAST( a, b, c ) := ( VECT_PERMUTE_LAST( a, b ), c );
//VECT_PERMUTE_LAST( a, b    ) := ( b, a );

//VECT concatenation ({a,b,c},{d,e,f}) -> {d,e,f,a,b,c}
VECT_CONCAT({a,b},{c}) := VECT_CONCAT({a},{c,b});
VECT_CONCAT({a},{c}) := {c,a};

VECT_INSIDE({a}) := a;

//vector add
(a,b)+(c,d)    := (a+c,b+d);
(a,b)+c        := (a,b+c);
c+(a,b)        := (a,c+b);
{a}+{b}        := {a+b};

//vector sub
(a,b)-(c,d)    := (a-c,b-d);
(a,b)-c        := (a,b-c);
c-(a,b)        := (-a,c-b);
{a}-{b}        := {a-b};

//vector mul
(a,b)*(c,d)    := (a*(c,d),b*(c,d));
a*(c,d)        := (a*c,a*d);
(c,d)*a        := (c*a,d*a);
{a}*{b}        := {a*b};
a*{b}          := {a*b};
{a}*b          := {a*b};

//vector div ( used by matrix inversion)
(a,b)/c      := (a/c,b/c);
{a}/_const(c) := {a/c};
//{a}/c        := {a/c};

//Vector or
/*(a,b)|(c,d)    := (a|c,b|d);
(a,b)|c        := (a|c,b);
c|(a,b)        := (c|a,b);
{a}|{b}        := {a|b};

//Vector xor
(a,b)^(c,d)    := (a^c,b^d);
(a,b)^c        := (a^c,b);
c^(a,b)        := (c^a,b);
{a}^{b}        := {a^b};*/

//Vector minus
-(a,b)         := (-a,-b);
-{a}           := {-a};

//Vector not
~(a,b)         := (~a,~b);

//vector min
MIN({a})       := MIN(a);
MIN((a,b),c)   := MIN(a,MIN(b,c));

//vector max
MAX({a})       := MAX(a);
MAX((a,b),c)   := MAX(a,MAX(b,c));

//vector creation
ZEROES(_const(a)) := ( ( a == 1 )  ? 0 : (ZEROES(a-1),0) );
ONES(_const(a))   := ( ( a == 1 )  ? 1 : (ONES(a-1),1) );

/////////////////////////////////////////////////////////////////////////////////////////////////////////////

//CHECK_UNIQUE(a)       := a; // never called
CHECK_UNIQUE(a,b)     := (a,b);
CHECK_UNIQUE(a,a)     := a;
CHECK_UNIQUE(a,1)     := a;
CHECK_UNIQUE(1,a)     := a;
CHECK_UNIQUE(a,b,c)   := (CHECK_UNIQUE( a, c ), b);
CHECK_UNIQUE(a,b,b)   := (a,b);
CHECK_UNIQUE(a,b,1)   := (a,b);

ADD_TO_LIST(a,(c,d))        := ADD_TO_LIST( ADD_TO_LIST(a,d), c);
ADD_TO_LIST( a, b )         := ADD_TO_LIST2( {b}, {a});
ADD_TO_LIST2( {e}, {a, b} ) := ADD_TO_LIST2( { CHECK_UNIQUE(e,b) }, {a} );
ADD_TO_LIST2( {e}, {a}    ) := CHECK_UNIQUE(e,a);

GET_VAR_LIST(a,b)      := ADD_TO_LIST(  GET_VAR_LIST(a), GET_VAR_LIST(b) );
GET_VAR_LIST(a+b)      := ADD_TO_LIST(  GET_VAR_LIST(a), GET_VAR_LIST(b) );
GET_VAR_LIST(a-b)      := ADD_TO_LIST(  GET_VAR_LIST(a), GET_VAR_LIST(b) );
GET_VAR_LIST(a*b)      := ADD_TO_LIST(  GET_VAR_LIST(a), GET_VAR_LIST(b) );
GET_VAR_LIST(a/b)      := GET_VAR_LIST( a ); 
GET_VAR_LIST(a^b)      := GET_VAR_LIST( a );
GET_VAR_LIST(-a)       := GET_VAR_LIST( a );
GET_VAR_LIST(_elem(a)) := a;
GET_VAR_LIST(a.b)      := a.b;
GET_VAR_LIST(a)        := 1;

////////////////////////////////////////////////////////////////////////////////////////////////////////////

LIST_RANK( a b ) :=  _eval( _gt( _elemid( a ) _elemid( b ) ) );
LIST_RANK( 1 a ) :=  0;
LIST_RANK( a 1 ) :=  1;
CHOOSE_VAR2(a,b) := ( LIST_RANK( a b ) ? a : b );
//CHOOSE_VAR2(1,a) := a;
//CHOOSE_VAR2(a,1) := a;

GET_VAR2( a + b )  := CHOOSE_VAR2( GET_VAR2(a), GET_VAR2(b) );
GET_VAR2( a - b )  := CHOOSE_VAR2( GET_VAR2(a), GET_VAR2(b) );
GET_VAR2( a * b )  := CHOOSE_VAR2( GET_VAR2(a), GET_VAR2(b) );
GET_VAR2( a / b )  := GET_VAR2( a ); 
GET_VAR2( a ^ b )  := GET_VAR2( a );
GET_VAR2( -a )     := GET_VAR2( a );
GET_VAR2(_elem(a)) := a;
GET_VAR2(a.b)      := a.b;
GET_VAR2( a )      := 1;

////////////////////////////////////////////////////////////////////////////////////////////////////////////

TO_SPARSE({a})         := TO_SPARSE_RECURSE(a);
TO_SPARSE_RECURSE(a,b) := TO_SPARSE_SPLIT2( TO_SPARSE_RECURSE(a), TO_SPARSE_LINE(b) );
TO_SPARSE_RECURSE(a)   := TO_SPARSE_SPLIT2( TO_SPARSE_LINE(a) );
TO_SPARSE_SPLIT2( {a}, {b}, (c, d) ) := ({a,c},{b,d});
TO_SPARSE_SPLIT2(           (c, d) ) := (  {c},  {d});

// Process one line
TO_SPARSE_LINE(a)  := TO_SPARSE_LINE3( a, GET_VAR2(a) );
TO_SPARSE_LINE3( a, b ) := TO_SPARSE_LINE2( POLY_TED( a, b ), b );
TO_SPARSE_LINE3( a, 1 ) := ( {a}, {1} );

TO_SPARSE_LINE2( TED( a b ), c ) := TO_SPARSE_SPLIT2( TO_SPARSE_LINE(b) , (a,c) );
TO_SPARSE_LINE2( TED( a 0 ), c ) := ({a},{c}); // remove this if you want {1,x,y,z} when rest is null rather than {x,y,z}


////////////////////////////////////////////////////////////////////////////////////////////////////////////

// LIST_RANK2( a b )    :=  _eval( _lt( _elemid( a ) _elemid( b ) ) );
// LIST_RANK2( 1 a )    :=  1;
// LIST_RANK2( a 1 )    :=  0;
LIST_ORDER( a, b, b ) := ( a, b );
LIST_ORDER( a, b )   := (a,b);
LIST_ORDER( a, a )   := a;
//LIST_ORDER( a, b, c) := ( LIST_RANK2(b c) ? (a,b,c) : (LIST_ORDER(a,c), b) );
//LIST_ORDER( a, b )   := ( LIST_RANK2(a b) ? (a,b) : (b,a) );
LIST_ORDER( a, b, c ) := (LIST_ORDER(a,c), b);

////////////////////////////////////////////////////////////////////////////////////////////////////////////
COMATRIX_ADD_TO_LIST( a, (b,c) ) := COMATRIX_ADD_TO_LIST(LIST_ORDER( a, c ), b);
COMATRIX_ADD_TO_LIST( a, b ) := LIST_ORDER( a, b );

COMATRIX_GET_LIST( a, {b})  := COMATRIX_ADD_TO_LIST( COMATRIX_GET_LIST(a), b );
COMATRIX_GET_LIST(    {b})  := b ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////

REMOVE_ONE(a,b,1) := REMOVE_ONE(a,b);
REMOVE_ONE(a,b,c) := ( REMOVE_ONE(a,b), c );
REMOVE_ONE(1,b) := b;
REMOVE_ONE(b,1) := b;
REMOVE_ONE(b)   := b;

COMATRIX_SOLVE( a )                 := { COMATRIX_SOLVE1(  TO_SPARSE(a)  ) };
COMATRIX_SOLVE1( {a}, {b} )         := COMATRIX_SOLVE2( {a}, {b}, {REMOVE_ONE(COMATRIX_GET_LIST( b ))} );
COMATRIX_SOLVE2( {a}, {b}, {f} )    := COMATRIX_SOLVE5( {a}, {b}, {f}, VSIZE({b}) );

COMATRIX_SOLVE5( {a}, {b}, {f}, n ) := ( COMATRIX_SOLVE5( {a}, {b}, {VECT_ROR(f)}, n-1 ), COMATRIX_SOLVE6( {a}, {b}, {f} ) );
COMATRIX_SOLVE5( {a}, {b}, {f}, 1 ) := COMATRIX_SOLVE6( {a}, {b}, {f} );

COMATRIX_SOLVE6( {a}, {b}, {f,e} )  := IPOLY_TED4( COMATRIX_SOLVE3( {a}, {b}, {f,e}, VSIZE({b}) ), e );
COMATRIX_SOLVE6( {a}, {b}, {  e} )  := IPOLY_TED4( COMATRIX_SOLVE3( {a}, {b}, {  e}, VSIZE({b}) ), e );

COMATRIX_SOLVE3( {a}, {b}, {f}, n ) := TED_ADD( TED_MUL2( VSIGN( b ) , COMATRIX_SOLVE3( {VECT_ROR(a)}, {VECT_ROR(b)}, {f}, n-1) ), COMATRIX_SOLVE4( {a}, {b}, {f} ) );
COMATRIX_SOLVE3( {a}, {b}, {f}, 1 ) := COMATRIX_SOLVE4( {a}, {b}, {f} ) ;

COMATRIX_SOLVE7({a}, {b}, {f}, TED(  c d ), m  ) := TED_MUL2( COMATRIX( {a}, {b}, {f}, m, m ), TED(  c d ) );
//COMATRIX_SOLVE7({a}, {b}, {f}, TED(  c d ), m  ) := TED_MUL2( COMATRIX_RECURSE13( {a}, {b} ), TED(  c d ) ); // Test FAIL
COMATRIX_SOLVE7({a}, {b}, {f}, TED(  0 0 ), m  ) := TED( 0 0 );

COMATRIX_SOLVE4( { a, d }, { b, c }, { f, e } ) := COMATRIX_SOLVE7({a}, {b}, {f}, TED( COMATRIX_GET_COEFF( ( d, c ), e ) COMATRIX_GET_COEFF( ( d, c ), 1 ) ), VSIZE({b}) ); //TED_MUL2( COMATRIX( {a}, {b}, {f}, VSIZE({b}) ), TED(  COMATRIX_GET_COEFF( ( d, c ), e )  COMATRIX_GET_COEFF( ( d, c ), 1 ) ) );
COMATRIX_SOLVE4( {    d },    { c },    { e } ) := TED(  COMATRIX_GET_COEFF( ( d, c ), e )  COMATRIX_GET_COEFF( ( d, c ), 1 ) );

////////////////////////////////////////////////////////////////////////////////////////////////////////////
COMATRIX_ENTRY( a )        := COMATRIX2( TO_SPARSE(a) );
COMATRIX2( {a}, {b}      ) := COMATRIX3( {a}, {b}, {REMOVE_ONE(COMATRIX_GET_LIST( b ))}, VSIZE({b}) );
COMATRIX3( {a}, {b}, {f}, m ) := COMATRIX(  {a}, {b}, {f}, m, m);

////////////////////////////////////////////////////////////////////////////////////////////////////////////
VSIGN2( a ) := ( ( a % 2 ) * 2) -1;
COMATRIX( {a}, {b}, {f}, m, n ) :=  VSIGN2( m ) * COMATRIX( {a}, {b}, {VECT_ROR(f)}, m, n-1) + COMATRIX1( {a}, {b}, {f}, m );
COMATRIX( {a}, {b}, {f}, m, 1 ) :=  COMATRIX1( {a}, {b}, {f}, m ) ;

COMATRIX11(  {a}, {b}, {f}, m, c ) := c * COMATRIX( {a}, {b}, {f}, m, m);
COMATRIX11(  {a}, {b}, {f}, m, 0 ) := 0;

COMATRIX1( { a, d }, { b, c }, { f, e }, m ) := COMATRIX11( {a}, {b}, {f}, m-1, COMATRIX_GET_COEFF( ( d, c ), e ) );
COMATRIX1( {    d },    { c },    { e }, m ) := COMATRIX_GET_COEFF( ( d, c ), e ) ;

COMATRIX_GET_COEFF( {a,b}, {c,v}, v ) := b;
COMATRIX_GET_COEFF(   {b},   {v}, v ) := b;
COMATRIX_GET_COEFF( {a,b}, {c,d}, v ) := COMATRIX_GET_COEFF( {a}, {c}, v );
COMATRIX_GET_COEFF(   {b},   {d}, v ) := 0;

////////////////////////////////////////////////////////////////////////////////////////////////////////////
COMATRIX_ENTRY1( a )   := COMATRIX_RECURSE1( TO_SPARSE(a) );
COMATRIX_SOLVE2( a )   := {COMATRIX_SOLVE3( TO_SPARSE(a) )};
COMATRIX_SOLVE3( {a}, {b} ) := COMATRIX_SOLVE_LINE( {a}, {b}, VSIZE(b) );

COMATRIX_SOLVE_LINE( {a}, {b}, m) := COMATRIX_SPLIT( COMATRIX_SOLVE_COL( a, b ), COMATRIX_SOLVE_LINE( {VECT_ROR(a)}, {VECT_ROR(b)}, m-1) );
COMATRIX_SOLVE_LINE( {a}, {b}, 1) := COMATRIX_SOLVE( a, b );

COMATRIX_SOLVE_COL( { a, {b,c} }, { d, {e,f} } ) := COMATRIX_SPLIT( COMATRIX_SOLVE_COL( {a, {b} }, { d, {e} }), (c, COMATRIX_RECURSE1( COMATRIX_REMOVE( {a}, {d}, f ) ) ) );
COMATRIX_SOLVE_COL( { a, {  c} }, { d, {  f} } ) := COMATRIX_SPLIT0( c, COMATRIX_RECURSE1( COMATRIX_REMOVE( {a}, {d}, f ) ) );

COMATRIX_RECURSE1( { a, {b,c} }, { d, {e,f} } ) := c * COMATRIX_RECURSE1( COMATRIX_REMOVE( {a}, {d}, f ) ) - COMATRIX_RECURSE1( {a, {b} }, { d, {e} });
COMATRIX_RECURSE1( { a, {  c} }, { d, {  f} } ) := c * COMATRIX_RECURSE1( COMATRIX_REMOVE( {a}, {d}, f ) );
COMATRIX_RECURSE1( {    {  c} }, {    {  f} } ) := c;
COMATRIX_RECURSE1( 0 ) := 0;

COMATRIX_SPLIT0( (c,d) ) := ( {c}, {d} );
COMATRIX_SPLIT0( 0 )    := 0;

COMATRIX_SPLIT( {a}, {b}, (c,d) ) := ( {a,c}, {b,d} );
COMATRIX_SPLIT( 0, (c,d) ) := 0;
COMATRIX_SPLIT( {a}, {b}, 0 ) := 0;

COMATRIX_SPLIT_SUB( {a}, {b}, (c,d) ) := ( {a,c}, {b,d} );
COMATRIX_SPLIT_SUB( 0, (c,d) )    := ( {c}, {d} ); //_print( 0 );
//COMATRIX_SPLIT_SUB( a, 0 ) := ( a ); //_print( 0 );

COMATRIX_REMOVE( { a, b }, { c, d }, v ) := COMATRIX_SPLIT( COMATRIX_REMOVE( { a }, { c }, v ), COMATRIX_REMOVE_SUB(b,d,v) );
COMATRIX_REMOVE( {    b }, {    d }, v ) := COMATRIX_SPLIT0( COMATRIX_REMOVE_SUB(b,d,v) );

COMATRIX_REMOVE_SUB( { a, b }, { c, v }, v ) := ({a},{c});
COMATRIX_REMOVE_SUB( { a, b }, { c, f }, v ) := COMATRIX_SPLIT_SUB( COMATRIX_REMOVE_SUB( { a }, { c }, v ), (b,f) );
COMATRIX_REMOVE_SUB( {    b }, {    v }, v ) := 0; //_none; //{x,u,v} remove x => not null
COMATRIX_REMOVE_SUB( {    a }, {    c }, v ) := ({a},{c});
