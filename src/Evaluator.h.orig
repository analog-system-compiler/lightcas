/*******************************************************************************/
/*  Copyright (C) 2014 The LightCAS project                                    */
/*                                                                             */
/*  This program is free software; you can redistribute it and/or modify       */
/*  it under the terms of the GNU General Public License as published by       */
/*  the Free Software Foundation; either version 2 of the License, or          */
/*  (at your option) any later version.                                        */
/*                                                                             */
/*  This program is distributed in the hope that it will be useful,            */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of             */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              */
/*  GNU General Public License for more details.                               */
/*                                                                             */
/*  You should have received a copy of the GNU General Public License          */
/*  along with this program; if not, write to the Free Software                */
/*  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
/*******************************************************************************/

#pragma once

#include "Value.h"

class CElement;

struct SValueContainer
{
double m_InitialRealValue;
double m_InitialCplxValue;
double m_CurrentRealValue;
double m_CurrentCplxValue;
};

class CEvaluator
{

protected:
  double*    m_ValueStack;
  CElement** m_ReferenceStack;
  unsigned   m_StackSize;
  unsigned   m_ValPos;
  CValue     m_Value;

public:
  void AllocateStack( unsigned size );
  void Evaluate( CElement* e );
  void GetMantAndExp( double v1, double v2, int& m1, int& m2, int& n );
  CValue& GetValue();

protected:  

public:
  void VectorStart();
  void VectorNext();
  void At();
  void PI();
  void Rand();
  void Sin();
  void Cos();
  void Tan();
  void Asin();
  void Acos();
  void Atan();
  void SinH();
  void CosH();
  void TanH();
  void AsinH();
  void AcosH();
  void AtanH();
  void Exp();
  void Ln();
  void Log();
  void Sqrt();
  void Floor();
  void Ceil();
  void Abs();
  void Sqr();
  void Neg();
  void Inv();
  void Id();
  void Bool();
  void LNot();
  void Fact();
  void Not();
  void Square();
  void Add();
  void Sub();
  void Mul();
  void Div();
  void Lower();
  void LowerOrEqual();
  void Greater();
  void GreaterOrEqual();
  void Equal();
  void NotEqual();
  void Min();
  void Max();
  void LAnd();
  void LOr();
  void Pow();
  void Par();
  void Mod();
  void And();
  void Or();
  void Xor();
  void ShiftRight();
  void ShiftLeft();
  
public:
  CEvaluator( void );
  ~CEvaluator( void );
};
