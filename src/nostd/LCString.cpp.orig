

#include "LCString.h"

char const CString::m_NullString[ 1 ] = "";

void CString::SetLength( unsigned len )
{
  m_Length = len;
  m_Data = ( char* )realloc( m_Data, ( m_Length + 1 ) * sizeof( char ) );
  m_Data[ len ] = '\0';
}

void CString::Append( const char* s, unsigned i )
{
  ASSERT( s != NULL );

  SetLength( m_Length + i );

  if( i == 1 )	// char
  {
    m_Data[ m_Length - 1 ] = *s;
  }

  else	// string;
  {
    memcpy( &m_Data[ m_Length - i ], s, i * sizeof( char ) );
  }

  m_Data[ m_Length ] = '\0';

}

bool CString::Compare( const char* s1, const char* s2 )
{
  int bcomp;
  /*
    if( s1 != NULL )
    {
      if( s2 != NULL )
        bcomp = strcmp( s1, s2 );

      else // s2 == NULL
        bcomp = ( *s1 == '\0' ) ? 0 : 1;
    }

    else  // s1 == NULL
    {
      if( s2 != NULL )
        bcomp = ( *s2 == '\0' ) ? 0 : -1;

      else // s2 == NULL
        bcomp = 0;
    }
    */
  if( ( s1 == NULL ) && ( s2 == NULL ) )
    bcomp = 0;

    else if( s1 == NULL )
  {
    bcomp = ( *s2 == '\0' ) ? 0 : -1;
    }

    else  if( s2 == NULL )
  {
    bcomp = ( *s1 == '\0' ) ? 0 : 1;
    }

    else
    {
      bcomp = strcmp( s1, s2 );
    }

  return bcomp == 0;
}


const char* CString::Set( unsigned i, unsigned base )
{
  char m_Buffer[ 256 ];
#if defined( __GNUG__ )
  unsigned j;
  unsigned k;
  unsigned val;

  j = sizeof( m_Buffer ) - 1;
  m_Buffer[ j ] = '\0';

  do
  {

    k = i / base;
    val = i - k * base;
    i = k;

    if( val < 10 )
    {
      val += '0';
    }

    else
    {
      val += 'A' - 10;
    }

    j--;
    m_Buffer[ j ] = val;

  }
  while( i && j );

  return &m_Buffer[ j ];

#else
  _itoa_s( i, m_Buffer, base );
  return m_Buffer;
#endif
}

